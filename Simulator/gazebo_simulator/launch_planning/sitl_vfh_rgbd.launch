<launch>
	<!-- Launch Gazebo Simulation -->
	<arg name="x" default="0.0"/>
	<arg name="y" default="-10.0"/>
	<arg name="z" default="0"/>
	<arg name="gazebo_gui" default="false"/>
	<arg name="visualization" default="true"/>
	<arg name="setup_rtabmap" default="false" />  <!-- rtabmap 启动特别慢 -->
	<arg name="mapper_enable" default="false" />  <!-- true: 使用建图数据; false: 使用传感器原始数据 -->
	<arg name="octomap_ground_filter_out" default="false"/>
	<arg     if="$(arg octomap_ground_filter_out)" name="octomap_ground_removal"  default="false"/>
	<arg unless="$(arg octomap_ground_filter_out)" name="octomap_ground_removal"  default="true"/>
	<arg name="depth_mode" default="true"/><!-- rtabmap 双目、深度信息需要开启 realsense_plugin; 深度信息也可以开启 openni_kinect; octomap 点云信息可以开通 openni_kinect 或 depth_camera -->
	<arg name="type_in_goal" default="false"/>
	
	<arg name="world" default="$(find prometheus_gazebo)/worlds/obstacle.world"/>
	<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/amov_solo_D435i/amov_solo_D435i.sdf"/>
	<arg name="pcd_file" value="$(find prometheus_gazebo)/maps/obstacle.pcd" />
	<arg name="model" default="amov_solo_D435i"/>
	<include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
		<arg name="gazebo_gui" default="$(arg gazebo_gui)"/>
		<arg name="world" value="$(arg world)"/>
		<arg name="sdf" value="$(arg sdf)"/>
		<arg name="model" value="$(arg model)"/>
		<arg name="x" value="$(arg x)"/>
		<arg name="y" value="$(arg y)"/>
		<arg name="z" value="$(arg z)"/>
	</include>

	<!-- 启动rtabmap_ros建图 -->
	<group if="$(arg setup_rtabmap)">
		<!-- RTAB-Map: RGB-D mode -->
		<include if="$(arg depth_mode)" file="$(find rtabmap_ros)/launch/rtabmap.launch">
			<arg name="rtabmap_args"      value="--delete_db_on_start --Optimizer/GravitySigma 0.3"/>
			<arg name="rgb_topic"         value="/realsense_plugin/camera/color/image_raw"/>
			<arg name="depth_topic"       value="/realsense_plugin/camera/depth/image_raw"/>
			<arg name="camera_info_topic" value="/realsense_plugin/camera/color/camera_info"/>
			<arg name="visual_odometry"   value="false"/>
			<arg name="approx_sync"       value="true"/>
			<arg name="frame_id"          value="base_link"/>
			<arg name="map_frame_id"	value="map"/>
			<arg name="odom_topic"         value="/prometheus/drone_odom"/> 
			<arg name="imu_topic"         value="/mavros/imu/data"/>
			<arg name="rtabmapviz"        value="false"/>
			<arg name="rviz"              value="false"/>
		</include>

		<!-- RTAB-Map: Stereo mode -->
		<include unless="$(arg depth_mode)" file="$(find rtabmap_ros)/launch/rtabmap.launch">
			<arg name="rtabmap_args"            value="--delete_db_on_start --Optimizer/GravitySigma 0.3 "/>
			<arg name="left_image_topic"        value="/realsense_plugin/camera/ir/image_raw"/>
			<arg name="right_image_topic"       value="/realsense_plugin/camera/ir2/image_raw"/>
			<arg name="left_camera_info_topic"  value="/realsense_plugin/camera/ir/camera_info"/>
			<arg name="right_camera_info_topic" value="/realsense_plugin/camera/ir2/camera_info"/>
			<arg name="stereo"                  value="true"/>
			<arg name="frame_id"                value="realsense_camera_link"/>
			<arg name="imu_topic"               value="/mavros/imu/data"/>
			<arg name="wait_imu_to_init"        value="true"/>
			<arg name="rtabmapviz"              value="false"/>
			<arg name="rviz"                    value="false"/>
		</include>
		
		<!-- 启动局部规划算法 -->
		<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen" launch-prefix="gnome-terminal --tab --">
			<!-- 如果直接使用  GroundTruth 点云输入 -->
			<!-- <remap from="/prometheus/planning/local_pcl" to="/prometheus/pcl_groundtruth"/> -->
			<remap from="/prometheus/planning/local_pcl" to="/rtabmap/cloud_map" />
			<!-- 参数 -->
			<param name="local_planner/sim_mode" value="true" type="bool"/>
			<param name="local_planner/planner_enable" value="true" type="bool"/>
			<!-- 二维平面规划 -->
			<param name="local_planner/is_2D" value="false" type="bool"/> <!-- 2D规划，并采用2D直方图？ -->
			<param name="local_planner/fly_height_2D" value="1.0" type="double"/> <!-- 如果是2D的话，则需要 -->
			<param name="vfh/isCylindrical" value="false" type="bool"/> <!-- 如果3D，采用圆柱面直方图？ -->
			<param name="vfh/isSpherical" value="true" type="bool"/> <!-- 如果3D，采用球面直方图？ -->
			<param name="local_planner/control_yaw_flag" value="true" type="bool"/> <!-- 自旋以感知地图 -->
			<!-- 选择算法 0代表APF,1代表VFH -->
			<param name="local_planner/algorithm_mode" value="1" type="int"/>
			<!-- 0代表建图数据类型octomap<sensor_msgs::PointCloud2>,1代表2d传感器数据类型<sensor_msgs::LaserScan>,2代表3d传感器数据类型<sensor_msgs::PointCloud2> -->
			<param name="local_planner/map_input" value="0" type="int"/>
			<!-- 最大速度，设的越小越安全 -->
			<param name="local_planner/max_planning_vel" value="0.5" type="double"/>
			<!-- 膨胀参数，一般设置为无人机的半径或更大 -->
			<param name="local_planner/inflate_distance" value="0.8" type="double"/>
			<!-- 感知距离，只考虑感知距离内的障碍物 -->
			<param name="local_planner/sensor_max_range" value="4.0" type="double"/>  
			<!-- weight -->
<!--			<param name="vfh/obstacle_weight" value="10.0" type="double"/>-->
<!--			<param name="vfh/goalWeight" value="0.1" type="double"/>-->
			<param name="vfh/h_cnt" value="60" type="double"/>
			<param name="vfh/v_cnt" value="10" type="double"/>
			<!-- 停止距离，小于该距离，停止自动飞行 -->
			<param name="local_planner/safe_distance" value="0.01" type="double"/>
		</node>	
	</group>
	
    <!-- 启动 octomap 建图 -->
	<group unless="$(arg setup_rtabmap)">
		<!-- RGBD相机局部点云 -->
		<!-- 如果没有，可以通过下面这个launch文件，根据RGBD生成局部点云(比较吃CPU) -->
		<!-- <include file="$(find prometheus_gazebo)/launch_basic/depth_proc.launch"></include> -->
		<node if="$(arg mapper_enable)" pkg="octomap_server" type="octomap_server_node" name="octomap_server">
			<param name="resolution" value="0.05" />
			<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
			<param name="frame_id" type="string" value="map" />
			<!-- maximum range to integrate (speedup!) -->
			<param name="sensor_model/max_range" value="5.0" />
			<!-- data source to integrate (PointCloud2) -->
			<remap from="cloud_in" to="/realsense_plugin/camera/local_pointclouds" />
			
			<!-- 地面分割滤除 -->
			<!-- base_frame_id -->
			<param if="$(arg octomap_ground_filter_out)" name="base_frame_id" type="string" value="world" />
			<!-- 地面是否滤除 -->
			<param if="$(arg octomap_ground_filter_out)" name="filter_ground " type="bool" value="$(arg octomap_ground_filter_out)" />
			<!-- 地面点域, Distance threshold for points (in z direction) to be segmented to the ground plane, by default 0.04 -->
			<param if="$(arg octomap_ground_filter_out)" name="ground_filter/distance" value="0.2" />
			<!-- 滤除平面识别, Angular threshold of the detected plane from the horizontal plane to be detected as ground, by default 0.15 -->
			<param if="$(arg octomap_ground_filter_out)" name="ground_filter/angle" value="0.2" />
			<!-- 滤除平面高度, Distance threshold from z=0 for a plane to be detected as ground, by default 0.07 -->
			<param if="$(arg octomap_ground_filter_out)" name="ground_filter/plane_distance" value="0.5" />
			
			<!-- 直通滤除地面 -->
<!--			<param if="$(arg octomap_ground_removal)" name="pointcloud_min_x " value="" />-->
<!--			<param if="$(arg octomap_ground_removal)" name="pointcloud_max_x " value="" />-->
<!--			<param if="$(arg octomap_ground_removal)" name="pointcloud_min_y " value="" />-->
<!--			<param if="$(arg octomap_ground_removal)" name="pointcloud_max_y " value="" />-->
			<param if="$(arg octomap_ground_removal)" name="pointcloud_min_z " value="0.15" />
<!--			<param if="$(arg octomap_ground_removal)" name="pointcloud_max_z " value="" />-->
			
		</node>
		
		<!-- 启动局部规划算法 -->
		<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen" launch-prefix="gnome-terminal --tab --">	
			<!-- 如果直接使用  GroundTruth 点云输入 -->
			<!-- <remap from="/prometheus/planning/local_pcl" to="/prometheus/pcl_groundtruth"/> -->
			<remap if="$(arg mapper_enable)" from="/prometheus/planning/local_pcl" to="/octomap_point_cloud_centers" />
			<remap unless="$(arg mapper_enable)" from="/prometheus/planning/local_pcl" to="/realsense_plugin/camera/local_pointclouds" />
			<!-- 参数 -->
			<param name="local_planner/sim_mode" value="true" type="bool"/>
			<param name="local_planner/planner_enable" value="true" type="bool"/>
			<!-- 二维平面规划 -->
			<param name="local_planner/is_2D" value="false" type="bool"/> <!-- 2D规划，并采用2D直方图？ -->
			<param name="local_planner/fly_height_2D" value="1.0" type="double"/> <!-- 如果是2D的话，则需要 -->
			<param name="vfh/isCylindrical" value="false" type="bool"/> <!-- 如果3D，采用圆柱面直方图？ -->
			<param name="vfh/isSpherical" value="true" type="bool"/> <!-- 如果3D，采用球面直方图？ -->
			<param name="local_planner/is_rgbd" value="true" type="bool"/> <!--如果map_input设定为传感器原始数据输入，那么激活rgbd数据处理 -->
			<param name="local_planner/control_yaw_flag" value="true" type="bool"/> <!-- 自旋以感知地图 -->
			<!-- 选择算法 0代表APF,1代表VFH -->
			<param name="local_planner/algorithm_mode" value="1" type="int"/>
			<!-- 0代表建图数据类型octomap<sensor_msgs::PointCloud2>,1代表2d传感器数据类型<sensor_msgs::LaserScan>,2代表3d传感器数据类型<sensor_msgs::PointCloud2> -->
			<param if="$(arg mapper_enable)" name="local_planner/map_input" value="0" type="int"/>
			<param unless="$(arg mapper_enable)" name="local_planner/map_input" value="2" type="int"/>
			<param name="local_planner/ground_removal" value="true" type="bool"/>
			<param name="local_planner/max_ground_height" value="0.3" type="double"/>
			<param name="local_planner/downsampling" value="true" type="bool"/>
			<param name="local_planner/resolution" value="0.2" type="double"/>
			<!-- 最大速度，设的越小越安全 -->
			<param name="local_planner/max_planning_vel" value="0.5" type="double"/>
			<!-- 膨胀参数，一般设置为无人机的半径或更大 -->
			<param name="local_planner/inflate_distance" value="0.8" type="double"/>
			<!-- 感知距离，只考虑感知距离内的障碍物 -->
			<param name="local_planner/sensor_max_range" value="4.0" type="double"/>  
			<!-- weight -->
<!--			<param name="vfh/obstacle_weight" value="10.0" type="double"/>-->
<!--			<param name="vfh/goalWeight" value="0.1" type="double"/>-->
			<param name="vfh/h_cnt" value="60" type="double"/>
			<param name="vfh/v_cnt" value="10" type="double"/>
			<!-- 停止距离，小于该距离，停止自动飞行 -->
			<param name="local_planner/safe_distance" value="0.01" type="double"/>
		</node>	
	</group>

	<!-- run the pub_goal.cpp -->
	<node if="$(arg type_in_goal)" pkg="prometheus_mission" type="pub_goal" name="pub_goal" output="screen" launch-prefix="gnome-terminal --tab --">	
	</node> 

	<!-- 启动rviz,设为false可关闭 -->
	<group if="$(arg visualization)">
		<node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_local_planning.rviz" />
		<!-- obstacle.world 真实点云 -->
		<node pkg="prometheus_slam" type="pc2_publisher_node" name="pc2_publisher_node" output="screen">	
			<param name="pcd_path" type="string" value="$(arg pcd_file)" />
		</node>
	</group>
</launch>
